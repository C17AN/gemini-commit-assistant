#!/bin/bash

# Gemini API를 사용한 AI 커밋 메시지 생성기 (최종 버전)

# --setup 옵션 처리
if [ "$1" = "--setup" ]; then
    echo "🔧 Git alias 설정 중..."
    
    # git ai-commit alias 설정
    git config --global alias.ai-commit '!ai-commit'
    
    if [ $? -eq 0 ]; then
        echo "✅ Git alias가 성공적으로 설정되었습니다!"
        echo "이제 다음 명령어들을 사용할 수 있습니다:"
        echo "  - ai-commit"
        echo "  - aic"
        echo "  - git ai-commit"
    else
        echo "❌ Git alias 설정에 실패했습니다."
        exit 1
    fi
    exit 0
fi

# --unsetup 옵션 처리
if [ "$1" = "--unsetup" ]; then
    echo "🔧 Git alias 해제 중..."
    
    # git ai-commit alias 해제
    git config --global --unset alias.ai-commit
    
    if [ $? -eq 0 ]; then
        echo "✅ Git alias가 성공적으로 해제되었습니다!"
        echo "이제 다음 명령어들만 사용할 수 있습니다:"
        echo "  - ai-commit"
        echo "  - aic"
        echo ""
        echo "💡 git ai-commit 명령어를 다시 사용하려면:"
        echo "  ai-commit --setup"
    else
        echo "❌ Git alias 해제에 실패했습니다."
        echo "💡 alias가 이미 설정되어 있지 않을 수 있습니다."
        exit 1
    fi
    exit 0
fi

# 도움말 옵션 처리
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "🤖 AI Commit CLI - AI 기반 커밋 메시지 생성기"
    echo ""
    echo "사용법:"
    echo "  ai-commit               # AI 커밋 메시지 생성"
    echo "  aic                     # 축약 명령어"
    echo "  git ai-commit           # git alias (설정 필요)"
    echo ""
    echo "옵션:"
    echo "  --setup                 # git alias 설정"
    echo "  --unsetup               # git alias 해제"
    echo "  --help, -h              # 도움말 표시"
    echo ""
    echo "설정:"
    echo "  ai-commit --setup       # git ai-commit 명령어 활성화"
    echo "  ai-commit --unsetup     # git ai-commit 명령어 해제"
    echo ""
    echo "예시:"
    echo "  git add ."
    echo "  ai-commit"
    echo ""
    exit 0
fi

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

echo -e "${MAGENTA}🤖 AI 커밋 메시지 생성기 (Gemini 기반)${NC}"

# Git 저장소 확인
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo -e "${RED}❌ Git 저장소가 아닙니다.${NC}"
    exit 1
fi

# Gemini CLI 설치 확인
if ! command -v gemini >/dev/null 2>&1; then
    echo -e "${YELLOW}⚠️  Gemini CLI가 설치되어 있지 않습니다.${NC}"
    echo -e "${CYAN}🔧 일반 에디터로 커밋 메시지를 작성합니다...${NC}"
    echo ""
    
    # 일반 git commit처럼 동작
    if [ -z "$STAGED_DIFF" ]; then
        echo -e "${CYAN}📦 파일을 staging합니다...${NC}"
        git add .
    fi
    
    # 에디터 열기
    git commit
    exit $?
fi

# 변경사항 확인
STAGED_DIFF=$(git diff --cached 2>/dev/null)
UNSTAGED_DIFF=$(git diff 2>/dev/null)
STATUS=$(git status --porcelain 2>/dev/null)

# 적절한 diff 선택
if [ -n "$STAGED_DIFF" ]; then
    DIFF="$STAGED_DIFF"
    echo -e "${CYAN}📝 Staged 파일의 변경사항을 분석합니다...${NC}"
elif [ -n "$UNSTAGED_DIFF" ]; then
    DIFF="$UNSTAGED_DIFF"
    echo -e "${CYAN}📝 Unstaged 파일의 변경사항을 분석합니다...${NC}"
else
    echo -e "${YELLOW}커밋할 변경사항이 없습니다.${NC}"
    exit 0
fi

# 변경사항 분석
ANALYSIS_TEXT="$DIFF"

echo -e "${CYAN}🤖 AI가 커밋 메시지를 생성 중입니다...${NC}"

# Gemini API 프롬프트 생성
PROMPT="Please analyze the following git changes and generate a concise commit message.

Rules for commit message:
1. Start with a verb (Add, Fix, Update, Remove, Refactor, etc.)
2. Use present tense
3. Capitalize first letter
4. Keep under 50 characters
5. No period at the end
6. Be specific about what changed

Git Status:
$STATUS

Git Changes:
$ANALYSIS_TEXT

Generate only one commit message, nothing else:"

# 임시 파일에 프롬프트 저장
TEMP_PROMPT="/tmp/gemini_prompt_$$.txt"
echo "$PROMPT" > "$TEMP_PROMPT"

# Gemini CLI 호출 시도
AI_MESSAGE=""

# 상세한 다중 라인 커밋 메시지를 위한 프롬프트 생성
DETAILED_MULTILINE_PROMPT="You are a git commit message generator. Analyze these git changes and generate a detailed multiline commit message.

ANALYZE THE CHANGES CAREFULLY:
- Look at file extensions and diff content to understand what changed
- Identify if changes are: code improvements, style/formatting, documentation, features, or cleanup
- Pay attention to deleted files, formatting changes, whitespace fixes

GENERATE MESSAGE IN THIS FORMAT:

TITLE (50 chars max):
- Start with: feat: (new features), refactor: (code improvement), style: (formatting), docs: (documentation), chore: (cleanup/maintenance)
- Brief summary in Korean

BODY (after TWO blank lines):
- filename: specific description of changes
- IMPORTANT: TWO blank lines between each file
- Use Korean language

Git Status:
$STATUS

Changes Analysis:
$(echo "$ANALYSIS_TEXT" | head -20)

EXACT FORMAT REQUIRED (copy this structure):

feat: 사용자 인증 시스템 구현 및 로딩 컴포넌트 추가


src/utils/auth.ts: JWT 토큰 검증 및 사용자 권한 관리 기능 구현


src/components/LoadingSpinner.vue: 비동기 작업 중 사용자 경험 개선

CRITICAL: Use exactly TWO newlines between title and body, and TWO newlines between each file.
Keep descriptions under 80 characters.
Generate ONLY the commit message, no quotes:"

if [ -z "$AI_MESSAGE" ]; then
    echo -e "${CYAN}🔍 Generating detailed multiline commit message...${NC}"
    
    # Gemini CLI 출력을 캡처 및 에러 처리
    GEMINI_OUTPUT=$(gemini --prompt "$DETAILED_MULTILINE_PROMPT" 2>&1)
    GEMINI_EXIT_CODE=$?
    
    # Gemini CLI 실행 실패 시 처리
    if [ $GEMINI_EXIT_CODE -ne 0 ]; then
        echo -e "${YELLOW}⚠️  Gemini CLI 실행에 실패했습니다.${NC}"
        echo -e "${CYAN}🔧 일반 에디터로 커밋 메시지를 작성합니다...${NC}"
        echo ""
        
        # 일반 git commit처럼 동작
        if [ -z "$STAGED_DIFF" ]; then
            echo -e "${CYAN}📦 파일을 staging합니다...${NC}"
            git add .
        fi
        
        # 에디터 열기
        git commit
        exit $?
    else
        # "Loaded cached credentials." 제거하고 의미있는 출력 추출
        AI_MESSAGE=$(echo "$GEMINI_OUTPUT" | grep -v "Loaded cached credentials" | grep -v "^$" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        
        # 길이 체크 (최소 30자 이상이어야 함)
        MSG_LENGTH=${#AI_MESSAGE}
        if [ "$MSG_LENGTH" -lt 30 ]; then
            echo -e "${YELLOW}⚠️  Message too short: $MSG_LENGTH chars. Trying simplified approach...${NC}"
            SIMPLE_PROMPT="Generate a detailed Korean commit message with title and body for: $(echo "$STATUS" | head -3 | tr '\n' ' ')"
            SIMPLE_OUTPUT=$(gemini --prompt "$SIMPLE_PROMPT" 2>&1)
            SIMPLE_EXIT_CODE=$?
            
            if [ $SIMPLE_EXIT_CODE -eq 0 ]; then
                AI_MESSAGE=$(echo "$SIMPLE_OUTPUT" | grep -v "Loaded cached credentials" | grep -v "^$" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            else
                echo -e "${YELLOW}⚠️  Simplified approach also failed. Using editor...${NC}"
                
                # 일반 git commit처럼 동작
                if [ -z "$STAGED_DIFF" ]; then
                    echo -e "${CYAN}📦 파일을 staging합니다...${NC}"
                    git add .
                fi
                
                # 에디터 열기
                git commit
                exit $?
            fi
        fi
    fi
fi

# 임시 파일 정리
rm -f "$TEMP_PROMPT"

# AI 응답 처리
if [ -n "$AI_MESSAGE" ] && [ "$AI_MESSAGE" != "Loaded cached credentials." ]; then
    # 불필요한 텍스트 제거
    AI_MESSAGE=$(echo "$AI_MESSAGE" | sed 's/^["'\'']\|["'\'']$//g' | sed 's/^\*\s*//' | sed 's/^-\s*//')
    
    # 메시지 형식 후처리 - 원하는 형식으로 변환
    AI_MESSAGE=$(echo "$AI_MESSAGE" | awk '
    BEGIN { 
        title_done = 0; 
        body_started = 0;
        first_file = 1;
    }
    /^[a-z]+:/ { 
        if (!title_done) {
            print $0;
            print "";
            print "";
            title_done = 1;
            next;
        }
    }
    /\.(ts|js|vue|md|json|sh):/ {
        if (body_started && !first_file) {
            print "";
            print "";
        }
        print $0;
        body_started = 1;
        first_file = 0;
        next;
    }
    {
        if (title_done && $0 != "") {
            if (!body_started && !match($0, /\.(ts|js|vue|md|json|sh):/)) {
                print "";
                print "";
                body_started = 1;
            }
            if (match($0, /\.(ts|js|vue|md|json|sh):/)) {
                if (!first_file) {
                    print "";
                    print "";
                }
                first_file = 0;
            }
            print $0;
        }
    }')
    
    echo ""
    echo -e "${BLUE}============================================================${NC}"
    echo -e "${GREEN}🎯 AI 생성 커밋 메시지:${NC}"
    echo -e "${BOLD}\"$AI_MESSAGE\"${NC}"
    echo -e "${BLUE}============================================================${NC}"
else
    echo -e "${YELLOW}⚠️  AI 응답을 받지 못했습니다.${NC}"
    echo -e "${CYAN}🔧 일반 에디터로 커밋 메시지를 작성합니다...${NC}"
    echo ""
    
    # 일반 git commit처럼 동작
    if [ -z "$STAGED_DIFF" ]; then
        echo -e "${CYAN}📦 파일을 staging합니다...${NC}"
        git add .
    fi
    
    # 에디터 열기
    git commit
    exit $?
fi

# 변경사항 요약 출력
echo ""
echo -e "${CYAN}📊 변경사항 요약:${NC}"
ADDED_FILES=$(echo "$STATUS" | grep "^??\|^A" | wc -l)
MODIFIED_FILES=$(echo "$STATUS" | grep "^.M\|^M" | wc -l)
DELETED_FILES=$(echo "$STATUS" | grep "^.D\|^D" | wc -l)

[ "$ADDED_FILES" -gt 0 ] && echo -e "  ${GREEN}+ $ADDED_FILES 새 파일${NC}"
[ "$MODIFIED_FILES" -gt 0 ] && echo -e "  ${YELLOW}~ $MODIFIED_FILES 수정된 파일${NC}"
[ "$DELETED_FILES" -gt 0 ] && echo -e "  ${RED}- $DELETED_FILES 삭제된 파일${NC}"
echo ""

while true; do
    read -p "$(echo -e "${BOLD}이 커밋 메시지를 사용하시겠습니까? (y)es/(n)o/(e)dit/(c)ustom:${NC} ")" choice
    case $choice in
        [Yy]* )
            # staged 파일이 없으면 모든 파일 추가
            if [ -z "$STAGED_DIFF" ]; then
                echo -e "${CYAN}📦 파일을 staging합니다...${NC}"
                git add .
            fi
            
            if git commit -m "$AI_MESSAGE"; then
                echo -e "${GREEN}✅ 커밋이 성공적으로 생성되었습니다!${NC}"
                echo -e "${BOLD}📝 커밋 메시지: \"$AI_MESSAGE\"${NC}"
                
                # 최근 커밋 정보 표시
                echo ""
                echo -e "${CYAN}📋 커밋 정보:${NC}"
                git log --oneline -1
            else
                echo -e "${RED}❌ 커밋 생성에 실패했습니다.${NC}"
            fi
            break
            ;;
        [Nn]* )
            echo -e "${YELLOW}🚫 커밋이 취소되었습니다.${NC}"
            exit 0
            ;;
        [Ee]* )
            TEMP_FILE="/tmp/edit_commit_$$.txt"
            echo "$AI_MESSAGE" > "$TEMP_FILE"
            echo -e "${CYAN}✏️  에디터를 시작합니다...${NC}"
            ${EDITOR:-vi} "$TEMP_FILE"
            EDITED_MESSAGE=$(cat "$TEMP_FILE" | head -1 | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            rm -f "$TEMP_FILE"
            
            if [ -n "$EDITED_MESSAGE" ]; then
                if [ -z "$STAGED_DIFF" ]; then
                    git add .
                fi
                
                if git commit -m "$EDITED_MESSAGE"; then
                    echo -e "${GREEN}✅ 편집된 커밋이 성공적으로 생성되었습니다!${NC}"
                    echo -e "${BOLD}📝 커밋 메시지: \"$EDITED_MESSAGE\"${NC}"
                else
                    echo -e "${RED}❌ 커밋 생성에 실패했습니다.${NC}"
                fi
            else
                echo -e "${YELLOW}🚫 편집이 취소되었습니다.${NC}"
            fi
            break
            ;;
        [Cc]* )
            read -p "$(echo -e "${CYAN}✏️  커스텀 커밋 메시지를 입력하세요:${NC} ")" CUSTOM_MESSAGE
            if [ -n "$CUSTOM_MESSAGE" ]; then
                if [ -z "$STAGED_DIFF" ]; then
                    git add .
                fi
                
                if git commit -m "$CUSTOM_MESSAGE"; then
                    echo -e "${GREEN}✅ 커스텀 커밋이 성공적으로 생성되었습니다!${NC}"
                    echo -e "${BOLD}📝 커밋 메시지: \"$CUSTOM_MESSAGE\"${NC}"
                else
                    echo -e "${RED}❌ 커밋 생성에 실패했습니다.${NC}"
                fi
            else
                echo -e "${YELLOW}⚠️  커밋 메시지가 비어있습니다.${NC}"
            fi
            break
            ;;
        * )
            echo -e "${RED}❌ y, n, e, 또는 c를 입력해주세요.${NC}"
            ;;
    esac
done
